{"version":3,"sources":["Component/Size.jsx","Component/Body.jsx","Component/Tabs.jsx","App.js","serviceWorker.js","index.js"],"names":["Size","state","list","inputvalue","id","handleinput","e","setState","target","value","Date","now","addlist","lists","console","log","deletelist","key","filter","className","placeholder","onChange","this","onClick","map","Component","Body","text1","props","items","item","Name","onDelete","Navbar","product","App","editingmode","style","fontSize","fontWeight","handledelete","handlesubmit","_name","push","editvalue","counter","forEach","data","onsavetext","enableproduct","c","length","const","type","name","onSave","onEdit","onProduct","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e48d5d5c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass Size extends Component {\r\n  state = {\r\n    list: [],\r\n    inputvalue: { id: \"\", Size: \"\" },\r\n  };\r\n\r\n  handleinput = (e) => {\r\n    this.setState({\r\n      inputvalue: {\r\n        Size: e.target.value,\r\n        id: Date.now(),\r\n      },\r\n    });\r\n  };\r\n\r\n  addlist = (e) => {\r\n    const list = this.state.inputvalue;\r\n    if (list.Size !== \"\") {\r\n      const lists = [...this.state.list, list];\r\n      this.setState({\r\n        list: lists,\r\n        inputvalue: { id: \"\", Size: \"\" },\r\n      });\r\n\r\n      console.log({ list });\r\n    }\r\n  };\r\n  deletelist = (key) => {\r\n    const list = this.state.list.filter((lists) => lists.id !== key);\r\n    this.setState({ list });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <label>Enter Product Size</label>\r\n          <input\r\n            placeholder=\"Enter Size\"\r\n            onChange={this.handleinput}\r\n            value={this.state.inputvalue.Size}\r\n          />\r\n          <button onClick={this.addlist} className=\"btn btn-info btn-sm m-2\">\r\n            Add Size\r\n          </button>\r\n          <br />\r\n        </div>\r\n\r\n        <div>\r\n          {this.state.list.map((lists) => (\r\n            <span key={lists.id}>\r\n              {lists.Size}\r\n\r\n              <button\r\n                className=\"btn btn-danger btn-sm\"\r\n                onClick={() => this.deletelist(lists.id)}\r\n              >\r\n                cut\r\n              </button>\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Size;\r\n","import React, { Component } from \"react\";\r\nimport Size from \"./Size\";\r\nclass Body extends Component {\r\n  state = { text1: \"\" };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.items.map((item) => (\r\n          <div key={item.id}>\r\n            <span key={item.id}>\r\n              {\"\"}\r\n              ProductID= {item.id}\r\n              <br />\r\n              Product Name= {item.Name}\r\n              <br />\r\n              <Size>Peroduct Size</Size>\r\n              <br />\r\n              <button\r\n                onClick={() => this.props.onDelete(item.id)}\r\n                className=\"btn btn-sm btn-danger\"\r\n              >\r\n                Do you Want to delete this product Click Me\r\n              </button>\r\n              {/* {item.editingmode === true ? (\r\n                <input\r\n                  className=\"display-none\"\r\n                  defaultValue={item.size}\r\n                  onChange={(e) => this.setState({ text1: e.target.value })}\r\n                />\r\n              ) : (\r\n                <span>{item.Size}</span>\r\n              )}\r\n              {item.editingmode === true ? (\r\n                <button\r\n                  className=\"btn m-2 btn-info btn-sm\"\r\n                  onClick={() => this.props.onSave(item.id, this.state.text1)}\r\n                >\r\n                  Save\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  onClick={() => this.props.onEdit(item.id)}\r\n                  className=\"btn m-2 btn-info btn-sm\"\r\n                >\r\n                  Edit\r\n                </button>\r\n              )} */}\r\n              {/* <button\r\n                onClick={() => this.props.onDelete(item.id)}\r\n                className=\"btn btn-sm btn-danger\"\r\n              >\r\n                Cut\r\n              </button>\r\n              <button\r\n                onClick={() => this.props.onProduct(item.id)}\r\n                className=\"btn m-2 btn-info btn-sm\"\r\n              >\r\n                Enable\r\n              </button>\r\n              <button\r\n                disabled={this.props.items.id}\r\n                onClick={() => this.props.onProduct(item.id)}\r\n                className=\"btn m-2 btn-info btn-sm\"\r\n              >\r\n                Disable\r\n              </button> */}\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from \"react\";\r\nclass Navbar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <span>All Product{this.props.product}</span>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport Body from \"./Component/Body\";\nimport Navbar from \"./Component/Tabs\";\nclass App extends Component {\n  state = { id: \"\", Name: \"\", editingmode: false, items: [] };\n  style = {\n    fontSize: 10,\n    fontWeight: \"bold\",\n  };\n\n  handledelete = (key) => {\n    const items = this.state.items.filter((item) => item.id !== key);\n    this.setState({ items });\n    console.log({ items });\n  };\n\n  handlesubmit = () => {\n    const item = this.state.items;\n    const id = this.state.id;\n    const _name = this.state.Name;\n    const Size = this.state.Size;\n    const editingmode = false;\n\n    item.push({ id: id, Name: _name, Size: Size, editingmode });\n    this.setState({ id: id, Name: _name, Size: Size, editingmode });\n    this.setState({ id: \"\", Name: \"\", Size: \"\" });\n    console.log({ item });\n  };\n  editvalue = (counter) => {\n    const list = [...this.state.items];\n\n    list.forEach((lists) => {\n      if (lists.id === counter) {\n        lists.editingmode = true;\n      }\n    });\n    const data = [...list];\n    this.setState({ list: data });\n  };\n  onsavetext = (key, Size) => {\n    const list = [...this.state.items];\n    list.forEach((lists) => {\n      if (lists.id === key) {\n        lists.editingmode = false;\n        lists.Size = Size;\n      }\n    });\n    const data = [...list];\n    this.setState({ list: data });\n  };\n  enableproduct = () => {\n    const product = this.state.items.filter((c) => c.id).length;\n    this.setState({ product });\n    console.log(product);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar const product={this.state.items.filter((c) => c.id).length} />\n\n        <div>\n          {\" \"}\n          <label style={this.style}>ID:</label>\n          <input\n            style={this.style}\n            type=\"text\"\n            placeholder=\"Enter product ID\"\n            value={this.state.id}\n            name=\"id\"\n            onChange={(e) => this.setState({ id: e.target.value })}\n          ></input>\n          <label style={this.style}>Name:</label>\n          <input\n            style={this.style}\n            type=\"text\"\n            placeholder=\"Enter product Name\"\n            value={this.state.Name}\n            name=\"Name\"\n            onChange={(e) => this.setState({ Name: e.target.value })}\n          ></input>\n          {/* <label style={this.style}>Size:</label>\n          <input\n            style={this.style}\n            type=\"text\"\n            placeholder=\"Enter product Size\"\n            value={this.state.Size}\n            name=\"Size\"\n            onChange={(e) => this.setState({ Size: e.target.value })}\n          ></input> */}\n          <button\n            onClick={this.handlesubmit}\n            style={this.style}\n            className=\"btn btn-sm btn-primary\"\n          >\n            Add product\n          </button>\n        </div>\n\n        <div>\n          <Body\n            items={this.state.items}\n            onDelete={this.handledelete}\n            onSave={this.onsavetext}\n            onEdit={this.editvalue}\n            onProduct={this.enableproduct}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n//import Size from \"./Component/Size\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}